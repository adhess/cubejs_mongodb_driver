"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoppedDockerComposeEnvironment = exports.StartedDockerComposeEnvironment = exports.DockerComposeEnvironment = void 0;
const dockerCompose = __importStar(require("docker-compose"));
const node_duration_1 = require("node-duration");
const bound_ports_1 = require("./bound-ports");
const container_state_1 = require("./container-state");
const docker_client_factory_1 = require("./docker-client-factory");
const docker_compose_container_name_resolver_1 = require("./docker-compose-container-name-resolver");
const generic_container_1 = require("./generic-container");
const logger_1 = __importDefault(require("./logger"));
const port_check_1 = require("./port-check");
const wait_strategy_1 = require("./wait-strategy");
const createDockerComposeOptions = (filePath, fileName) => ({
    cwd: filePath,
    config: fileName,
    log: false,
});
class DockerComposeEnvironment {
    constructor(composeFilePath, composeFile) {
        this.composeFilePath = composeFilePath;
        this.composeFile = composeFile;
        this.waitStrategy = {};
        this.startupTimeout = new node_duration_1.Duration(60000, node_duration_1.TemporalUnit.MILLISECONDS);
        this.dockerClient = new docker_client_factory_1.DockerodeClientFactory().getClient();
    }
    withWaitStrategy(containerName, waitStrategy) {
        this.waitStrategy[containerName] = waitStrategy;
        return this;
    }
    withStartupTimeout(startupTimeout) {
        this.startupTimeout = startupTimeout;
        return this;
    }
    up() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.info(`Starting docker-compose environment`);
            yield this.dockerComposeUp();
            const startedContainers = yield this.findStartedContainers();
            const startedGenericContainers = (yield Promise.all(startedContainers.map((startedContainer) => __awaiter(this, void 0, void 0, function* () {
                const container = yield this.dockerClient.getContainer(startedContainer.Id);
                const containerName = docker_compose_container_name_resolver_1.resolveDockerComposeContainerName(startedContainer.Names[0]);
                (yield container.logs())
                    .on("data", (data) => logger_1.default.trace(`${containerName}: ${data}`))
                    .on("err", (data) => logger_1.default.error(`${containerName}: ${data}`));
                const inspectResult = yield container.inspect();
                const boundPorts = this.getBoundPorts(startedContainer);
                const containerState = new container_state_1.ContainerState(inspectResult);
                yield this.waitForContainer(container, containerName, containerState, boundPorts);
                return new generic_container_1.StartedGenericContainer(container, this.dockerClient.getHost(), boundPorts, containerName, this.dockerClient);
            })))).reduce((map, startedGenericContainer) => {
                const containerName = startedGenericContainer.getName();
                return Object.assign(Object.assign({}, map), { [containerName]: startedGenericContainer });
            }, {});
            return new StartedDockerComposeEnvironment(this.composeFilePath, this.composeFile, startedGenericContainers);
        });
    }
    dockerComposeUp() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield dockerCompose.upAll(createDockerComposeOptions(this.composeFilePath, this.composeFile));
            }
            catch ({ err }) {
                logger_1.default.error(`Failed to start docker-compose environment: ${err}`);
                try {
                    yield dockerCompose.down(createDockerComposeOptions(this.composeFilePath, this.composeFile));
                }
                catch (_a) {
                    logger_1.default.warn(`Failed to stop docker-compose environment after failed start`);
                }
                throw new Error(err.trim());
            }
        });
    }
    findStartedContainers() {
        return __awaiter(this, void 0, void 0, function* () {
            const containers = yield this.dockerClient.listContainers();
            return containers.filter((container) => container.Labels["com.docker.compose.version"] !== undefined);
        });
    }
    getBoundPorts(containerInfo) {
        const boundPorts = new bound_ports_1.BoundPorts();
        containerInfo.Ports.forEach((port) => boundPorts.setBinding(port.PrivatePort, port.PublicPort));
        return boundPorts;
    }
    waitForContainer(container, containerName, containerState, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.debug("Waiting for container to be ready");
            const waitStrategy = this.getWaitStrategy(container, containerName);
            yield waitStrategy.withStartupTimeout(this.startupTimeout).waitUntilReady(container, containerState, boundPorts);
            logger_1.default.info("Container is ready");
        });
    }
    getWaitStrategy(container, containerName) {
        if (this.waitStrategy[containerName]) {
            return this.waitStrategy[containerName];
        }
        else {
            const hostPortCheck = new port_check_1.HostPortCheck(this.dockerClient.getHost());
            const internalPortCheck = new port_check_1.InternalPortCheck(container, this.dockerClient);
            return new wait_strategy_1.HostPortWaitStrategy(this.dockerClient, hostPortCheck, internalPortCheck);
        }
    }
}
exports.DockerComposeEnvironment = DockerComposeEnvironment;
class StartedDockerComposeEnvironment {
    constructor(composeFilePath, composeFile, startedGenericContainers) {
        this.composeFilePath = composeFilePath;
        this.composeFile = composeFile;
        this.startedGenericContainers = startedGenericContainers;
    }
    down() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.info(`Stopping docker-compose environment`);
            try {
                yield dockerCompose.down(createDockerComposeOptions(this.composeFilePath, this.composeFile));
                return new StoppedDockerComposeEnvironment();
            }
            catch ({ err }) {
                logger_1.default.error(`Failed to stop docker-compose environment: ${err}`);
                throw new Error(err.trim());
            }
        });
    }
    getContainer(containerName) {
        const container = this.startedGenericContainers[containerName];
        if (!container) {
            const error = `Cannot get container "${containerName}" as it is not running`;
            logger_1.default.error(error);
            throw new Error(error);
        }
        return container;
    }
}
exports.StartedDockerComposeEnvironment = StartedDockerComposeEnvironment;
class StoppedDockerComposeEnvironment {
}
exports.StoppedDockerComposeEnvironment = StoppedDockerComposeEnvironment;
