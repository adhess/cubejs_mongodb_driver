import { Duration } from "node-duration";
import { StartedGenericContainer } from "./generic-container";
import { WaitStrategy } from "./wait-strategy";
export declare class DockerComposeEnvironment {
    private readonly composeFilePath;
    private readonly composeFile;
    private readonly dockerClient;
    private waitStrategy;
    private startupTimeout;
    constructor(composeFilePath: string, composeFile: string);
    withWaitStrategy(containerName: string, waitStrategy: WaitStrategy): this;
    withStartupTimeout(startupTimeout: Duration): this;
    up(): Promise<StartedDockerComposeEnvironment>;
    private dockerComposeUp;
    private findStartedContainers;
    private getBoundPorts;
    private waitForContainer;
    private getWaitStrategy;
}
export declare class StartedDockerComposeEnvironment {
    private readonly composeFilePath;
    private readonly composeFile;
    private readonly startedGenericContainers;
    constructor(composeFilePath: string, composeFile: string, startedGenericContainers: {
        [containerName: string]: StartedGenericContainer;
    });
    down(): Promise<StoppedDockerComposeEnvironment>;
    getContainer(containerName: string): StartedGenericContainer;
}
export declare class StoppedDockerComposeEnvironment {
}
